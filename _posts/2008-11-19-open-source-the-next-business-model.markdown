---
layout: post
title: 'Open Source: The Next Business Model'
date: '2008-11-19 01:44:50'
tags:
- all
- hardware
- open
- open-source
- software
- source
---

Here is a little something I wrote for English class. I personally think that this article only recapitulates what everybody knows about open source, but hey, why not share it with the internetz? Enjoy

From the very start of the emergence of computing, hundreds, thousands, maybe hundreds of thousands of companies have been trying to get their share of their money to be made in the various segments of computing. The hardware sector, despite it’s explosive growth, stayed pretty simple: the giants of the industry have been fighting for market share ever since it all started, and it will continue that way. The software sector on the other hand, has been relatively the same for a very long while. From the very start of popular computing where people where buying Commodores and dot-matrix printers to type their own documents to just a couple of years ago,  people have thought there was only two ways of obtaining the software that they needed: either buying it, or obtaining it illegally, through download or sharing. People are generally unaware that for all that time, an alternative has been available: open source software.

Those who know open source generally can’t live without it. No more shelling big bucks for basic functionality apps like word processing suites, there now is an open source equivalent or replacement to pretty much any commercial software. Some of the most popular software includes OpenOffice, the GIMP, and all the flavors of Linux, but this is just the tip of the iceberg, as sites like Sourceforge are crawling with thousands and thousands of projects.

The concept behind open source is simple. Put your time into the writing of a program, ask others to cooperate, then distribute the compiled software as well as the source code (actual programming code) to the world, for free. Open Source Software (AKA OSS) must not be mixed up with freeware: although all OSS is technically freeware (since it’s free), some freeware has closed source code, which makes it a whole other thing. The concept is difficult to grasp at first: why would a developer write code for free when he can do it for well over 30$ an hour? Why contribute to something and ask nothing in return? While most projects accept donations, they are clearly not making any money out of it, so how can giving away stuff be a viable alternative to today’s software sale’s system based on selling compiled code as intellectual properties? This is what this essay will explore.

First of all, what makes software so popular? Obviously, first of all, it’s free. And because it’s free, it has tons of advantages attached to it, advantages that are all interlinked with one another. User-base is a very big upside: because people are free to download an app whenever they want, obviously more people are going to use the said app, hence more users are prone to liking the piece of software. From then starts word of mouth advertising, in addition to all the other kinds of user-generate publicity that OSS projects usually get. Think about the “Optimized for Firefox”, or “Get Firefox” badges you’re probably seen around the web; commercial software just doesn’t get that kind of attention, to the rare exception of some hyped, niche products like Apple’s OSX and the hardware it comes with. How often have you seen a “Get Internet Explorer” badge on the bottom of web pages? Never, and chances are you won’t live long enough to see it once either. The hype over this piece of software snowballs into something enormous (again Firefox is a prime example), and as more and more people use the piece of software, amateur or professional developers join the bandwagon, and here is another advantage: people who like your project will want to collaborate. donations, contribution to the source code, plugins, and most importantly cross-platform versions (Pidgin can run on more OS that you can name), they all become free additions to your product, which makes it even more appealing for an even larger group of people. Wash rinse, repeat, and you have yourself a project that has the potential of lasting forever.

Yes, sure, some commercial software, like Adobe Photoshop, has an API (Application Programming Interface) that allows for third party tools to be implemented, but the problem with those is that the core of the program can not be modified by the general public, so you are at the mercy of the developer for updates, security patches, and if you don’t like how the newer Photoshop looks, you can’t just ask Adobe for the source code and branch off your own project to have it your way, something that has been seen many times in OSS projects, Torrentflux/TF-B4RT and Pidgin/Carrier to names those that I am aware of. Bottom line is, with open source, you’re in control. If you don’t like what you download, you can go ahead and learn programming and make your own piece of software. <br /> 
Another big advantage that open source has is that very often, it’s a standard setter. Millions and millions of protocols and technologies that power the web and the apps that you use on an everyday basis are powered by open source projects: SQL (Simplified Query Language, which powers databases) is an open norm, perhaps over 90% of websites use it, and all of it’s variants are freely available. The server software that drives it, MySQL, PostGre, the web scripting that call to it, PHP, Perl, the server software that displays it, HTTPD, Tomcat, and even in some cases the website engines that run all those things together to show you the content, Wordpress, PHPBB, they all are free, open source projects. While there are some commercial alternatives to the aforementioned, they don’t fare very well, because again, a team of 50 full time coders will never, ever be able to match what thousands of collaborators can do in just a couple of hours. Had these open norms had been managed by private firms and corporations, all hell would have broken loose. Imagine the BluRay/HD-DVD type format war, but over everything: systems would be isolated from one another, confined to their own proprietary software, able to share information only with it’s similarly configured peers. Anybody who would want to break this confinement would have to pay to get to open up the specifications, possibly creating a rich cartel of software developers, constricting the growth of the entire software sector. Nobody wants that.

So you get the idea, open source is great. But how can it be profitable for a real world business? First, consider this fact: the home segment is a real joke to most software companies; businesses is where the real big bucks are at. So much, that many say that Microsoft could stop selling it’s OS to residential customers and still be one of the richest companies on this planet. Another example, Awil’s Avast Antivirus software is given for free to residential users to popularize the products, while enterprise licenses milk the cash cow. Take Red Hat’s example: they’ve been MAJOR contributors to the linux kernel in addition to fathering two immensely popular linux distributions: Red Hat Linux which is now defunct, and Fedora Core, later dubbed just Fedora, which is going on strong currently at it’s 9th edition. Both products are freely available, the secret to RH’s amazing revenus being their entreprise version linux, originally named Red Hat Entreprise. By selling support and special server-centric additions to their operating system such as virtualization tools, the company has pocketed 700 million dollars in 2007, and continues to grow.

Support is where it’s at, because many companies are willing to take a risk when it comes to buying software. Should I hired a skilled worker who can work out my server cluster and pay less for support, or should I buy the bigger, more costly software kit where any 12 year old can complete a setup in less than a day? For immediate deployment, hiring a skilled person and using open source is much more cost efficient, as support is a la carte. Obviously, this is still plenty profitable for the software company; Red Hat’s JBoss software supposedly brings in over 10$ in support profit for every dollar put into licence costs, which makes a 1000$ product (which is relatively cheap) become 10 000$ in profit at the end of the line.

Entreprise operating systems and apps aren’t the only things profitable, Firefox (sorry for the redundancy) brings in about 75 million $US to Mozilla by making Google the default search engine, and Auttomatic the makers of Wordpress, which counts less than 20 employees and do consulting and anti-spam services made close to 30 million greens last year, and their start product is Wordpress, a free personal publishing system. The list goes on and on, proving that open source IS a viable business model.
Hoping that the entire world of software will switch to open source is ridiculous, but what we can expect in the years to come is the breaking down in software components into smaller, more affordable parts, as to customize the user’s experience. Microsoft has learned this from Vista recently: not everybody wants to buy a product just because some big guy says it’s the new norm, shell out hundreds of dollars for the same old product in a new skin with a couple of tools added. Vista Ultimate is worth over 250$ for a home licence; who in their right mind will spend 1200$ on a computer to then spit out another quarter grand to get nice looking menus? The oldschool won’t die just yet, people still are willing to pay for software, but with more and more alternatives popping up here and there, something has to change, and open source just might be what software will be going towards.